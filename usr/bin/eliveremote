#!/bin/bash
source /usr/lib/elive-tools/functions

. gettext.sh
TEXTDOMAIN="eliveremote"
export TEXTDOMAIN

set -E
trap "cleanups 1 ; exit" 1 2 6 9 11 13 14 15
#trap "cleanups 1 SIGHUP ; exit" SIGHUP
#trap "cleanups 1 KILL ; exit" KILL
#trap "cleanups 1 QUIT ; exit" QUIT
#trap "cleanups 1 TERM ; exit" TERM
#trap "cleanups 1 EXIT ; exit" EXIT
#trap "cleanups 1 INT ; exit" INT
#trap "cleanups 1 ERR ; exit" ERR

logs="/tmp/.$(basename $0)-${USER}-logs.txt"
connection_attemps=0

#===  FUNCTION  ================================================================
#          NAME:  cleanups
#   DESCRIPTION:  function for exit / end processes / cleanups
#===============================================================================
cleanups(){
    # pre {{{
    el_debug "$@"

    # }}}

    killall zenity

    # remove existing connection
    if [[ -n "$pid_connection" ]] ; then
        kill "$pid_connection" 2>/dev/null || kill -9 "${pid_connection}" 2>/dev/null
    fi

    # remove other possible connections
    if ps aux | grep -v grep | grep -q "ssh -o StrictHostKey" ; then
        killall ssh 2>/dev/null
        killall -9 ssh 2>/dev/null
    fi

    # close progress dialog
    if [[ -n "$pid_progress" ]] ; then
        kill "$pid_progress" 2>/dev/null || kill -9 "${pid_progress}" 2>/dev/null
    fi

}

#===  FUNCTION  ================================================================
#          NAME:  port_verify
#   DESCRIPTION:  verify if the port is busy or not
#    PARAMETERS:  file with logs
#       RETURNS:  false if we need to enter in a new loop (for use in parent)
#===============================================================================
port_verify(){
    # pre {{{
    local file
    el_debug
    el_security_function_loop 22 || return

    file="$1"
    el_check_variables "file"

    if ! [[ -e "$file" ]] ; then
        sleep 2
        if ! [[ -e "$file" ]] ; then
            el_explain 0 "file to verify not exist, ignoring verification of port, it should be ok"
            return
        fi
    fi


    # }}}

    # port busy ?
    if grep -q "remote port forwarding failed for listen port" "${file}"  ; then
        # report error to surgeon
        el_explain 0 "port ${port_local} busy, trying with the next one"

        # increase port
        port_local="$(( $port_local + 1 ))"
        if [[ "${port_local}" -gt "${port_local_max}" ]] ; then
            el_error "reached maximum port available, exiting..."
            exit 1
        fi

        # run again
        ${FUNCNAME[1]}
        return 1
    fi

    if grep -q "Connection timed out" "${file}"  ; then
        el_error "timeout trying to connect"
    fi

    is_port_accepted=1
}
#===  FUNCTION  ================================================================
#          NAME:  connection_check
#   DESCRIPTION:  check if the remote is reachable
#===============================================================================
connection_check(){
    # pre {{{
    el_debug

    el_security_function_loop 22 || return

    el_check_variables "port_local"

    # }}}
    # check connection with surgeon {{{

    #copy key to user home or we will have an error
    mkdir -p "$HOME/.ssh"
    cp -f "${profile_d}/id_rsa" "$HOME/.ssh/eliveremote-id_rsa"
    chmod 0400 "$HOME/.ssh/eliveremote-id_rsa"
    chmod 0700 "$HOME/.ssh"


    el_debug "ssh -o ConnectTimeout=20 -o StrictHostKeyChecking=no -o ServerAliveInterval=100 -i \"${HOME}/.ssh/eliveremote-id_rsa\" -T -R ${port_local}:localhost:${SURGEON_PORT} eliveremote@${SURGEON_ADDRESS}"
    ssh -o ConnectTimeout=20 -o StrictHostKeyChecking=no -o ServerAliveInterval=100 -i "${HOME}/.ssh/eliveremote-id_rsa" -T -R ${port_local}:localhost:${SURGEON_PORT} eliveremote@${SURGEON_ADDRESS} 2>"${logs}" 1>/dev/null
    returned_status="$?"
    case $returned_status in

        1)
            if ! ((is_port_accepted)) ; then
                if ! port_verify "${logs}" ; then
                    # we already enter again
                    return
                fi
            fi

            # connection successful (logouted)
            true

            ;;
        255|124|123)
            # ssh is down, returns 255
            if [[ "$connection_attemps" -gt 2 ]] || grep -q "Connection timed out" "${logs}"  ; then
                if [[ -n $DISPLAY ]] ; then
                    $guitool --error --text="$( eval_gettext "The selected administrator is not reachable or has problems with the connection." )"
                else
                    echo -e "$( eval_gettext "The selected administrator is not reachable or has problems with the connection." )"
                fi
                #main "$@"
                exit

            else
                # increment attempt
                connection_attemps="$(( $connection_attemps + 1 ))"
                el_explain 0 "trying again..."
                sleep 4

                # increment port, since can be due to a busy port too
                port_local="$(( $port_local + 1 ))"
                if [[ "${port_local}" -gt "${port_local_max}" ]] ; then
                    el_error "reached maximum port available, exiting..."
                    exit 1
                fi

                # try again
                ${FUNCNAME}
                return
            fi

            ;;
        *)
            el_warning "unknown return status for the remote check, please report it: $returned_status"
            cat "${logs}"
            ;;
    esac


    # - check connectivity }}}

}
#===  FUNCTION  ================================================================
#          NAME:  connection_stablish
#   DESCRIPTION:  open the connection and track it
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
connection_stablish(){
    # pre {{{
    el_debug

    el_security_function_loop 22 || return

    local loops is_connection_started
    loops=0

    # cleanups function for remove remaining process
    # remove existing connection
    if [[ -n "$pid_connection" ]] ; then
        kill "$pid_connection" 2>/dev/null || kill -9 "${pid_connection}" 2>/dev/null
    fi


    rm -f "${logs}"

    # }}}

    #copy key to user home or we will have an error
    mkdir -p "$HOME/.ssh"
    cp -f "${profile_d}/id_rsa" "$HOME/.ssh/eliveremote-id_rsa"
    chmod 0400 "$HOME/.ssh/eliveremote-id_rsa"
    chmod 0700 "$HOME/.ssh"

    el_debug "ssh -o ConnectTimeout=40 -o StrictHostKeyChecking=no -o ServerAliveInterval=100 -i \"${HOME}/.ssh/eliveremote-id_rsa\" -N -R ${port_local}:localhost:${SURGEON_PORT} eliveremote@${SURGEON_ADDRESS}"
    ssh -o ConnectTimeout=40 -o StrictHostKeyChecking=no -o ServerAliveInterval=100 -i "${HOME}/.ssh/eliveremote-id_rsa" -N -R ${port_local}:localhost:${SURGEON_PORT} eliveremote@${SURGEON_ADDRESS} >"${logs}" 2>&1  &
    pid_connection="$!"

    while true
    do
        sleep 1

        # try with another port if this one not works
        if ! ((is_port_accepted)) ; then
            if ! port_verify "${logs}" ; then
                # we already enter again
                return
            fi
        fi

        if ! ((is_connection_started)) ; then
            if [[ "$loops" -gt 2 ]] ; then

                kill "$pid_progress" 2>/dev/null || kill -9 "${pid_progress}" 2>/dev/null

                el_explain 0 "using port __${port_local}__"
                is_connection_started=1

                # share your connection info {{{

                # now that we are connected, give the info
                if [[ -n $DISPLAY ]] ; then
                    # xchat available ?
                    if ! el_dependencies_check xchat ; then
                        el_dependencies_install xchat
                    fi

                    # automatic mode
                    if [[ "$UID" != 0 ]] ; then
                        if $guitool --question --text="$( eval_gettext "Do you want to automatically inform the details of the connection to the administrator via private message in the chat room? (recommended)" )" ; then
                            if ! ps ux | grep -v grep | grep -qs xchat ; then
                                xchat &
                            fi
                            # wait an entire minute for a successful connection, just in case that less is not enough
                            sleep 60
                            xchat -e -c "msg ${SURGEON_NICK} user name:    ${USER}" &
                            xchat -e -c "msg ${SURGEON_NICK} port:         ${port_local}" &
                            xchat -e -c "msg ${SURGEON_NICK} email:        ${user_email}" &
                            xchat -e -c "msg ${SURGEON_NICK} address/host: ${SURGEON_ADDRESS}" &
                            sleep 1
                            xchat -e -c "msg ${SURGEON_NICK} root pass:    ${pass_root}" &


                            local translated_message
                            translated_message="$( printf "$( eval_gettext "Information sent in a private message to %s on the IRC chat, please make sure he is connected or he will not receive the info and cannot assist you, note that this message is sent successfully only if the chat was able to connect to the elive room, otherwise try to connect again or do it manually" )" "$SURGEON_NICK" )"

                            $guitool --info --text="$translated_message"
                        fi
                    else
                        if ((is_mode_live)) ; then
                            if $guitool --question --text="$( eval_gettext "Do you want to automatically inform the details of the connection to the administrator via private message in the chat room? (recommended)" )" ; then
                                su -c "xchat" eliveuser &
                                # wait an entire minute for a successful connection, just in case that less is not enough
                                sleep 60
                                xchat -e -c "msg ${SURGEON_NICK} user name:    ${USER}" &
                                xchat -e -c "msg ${SURGEON_NICK} port:         ${port_local}" &
                                xchat -e -c "msg ${SURGEON_NICK} email:        ${user_email}" &
                                xchat -e -c "msg ${SURGEON_NICK} address/host: ${SURGEON_ADDRESS}" &
                                sleep 1
                                xchat -e -c "msg ${SURGEON_NICK} root pass:    ${pass_root}" &
                            fi
                        fi


                        local translated_message
                        translated_message="$( printf "$( eval_gettext "Please open your chat application (second icon of your dock bar) and contact %s. Tell him your root password and the port number '%s' in a private chat (right click on him)" )" "$SURGEON_NICK" "$port_local" )"

                        $guitool --info --text="$translated_message"
                    fi
                else

                    local translated_message
                    translated_message="$( printf "$( eval_gettext "Please contact %s for be able to connect, he needs to know only your root password, you can do it from another computer or you can run 'irssi' for open an IRC chat in console mode, you should enter in the channel #elive of the irc.freenode.net server" )" "$SURGEON_NICK" )"

                    echo -e "$translated_message"
                fi


                # please wait until it closes
                if [[ -n "$DISPLAY" ]] ; then
                    $guitool --warning --text="$( eval_gettext "Important: If you have run this tool from a terminal do not close it until the remote assistance has finished. A message will appear when the connection finishes so you can close this window." )"
                else
                    echo -e "$( eval_gettext "The remote user should be now connected, please wait until a message appears about that the connection has finished before to close this application." )"
                fi

                sleep 5
                if $guitool --question --text="$( eval_gettext "Do you want to see what is happening remotely?" )" ; then
                    if $guitool --question --text="$( eval_gettext "We are going to open a shared terminal, please maximize this window first, and do not close it until the remote assistance finished. Somebody is working from it, so do not type on it or you will make his work more difficult." )" ; then
                        gksu "urxvt -e bash -c 'tmux attach'"
                    fi
                fi


                # - share your connection info }}}
            fi
        fi

        # check if connection stills up
        if ! ps aux | grep -v grep | grep -q "ssh.*StrictHostKeyChecking.*${port_local}" ; then

            if [[ -n "$DISPLAY" ]] ; then
                $guitool --info --text="$( eval_gettext "Connection finished" )"
            else
                echo -e "$( eval_gettext "Connection finished" )"
            fi

            cleanups
            exit
        fi

        loops="$(( $loops + 1 ))"
        sleep 5
    done
}


main(){
    # pre {{{
    local guitool surgeon line result profile_d returned_status

    # Usage
    case $1 in
        -h|--help)
            echo -e "Usage: $(basename $BASH_SOURCE) [-p port]"
            exit 1
            ;;
        -p)
            port_local="$2"
            shift 2
            ;;
    esac



    guitool="zenity --window-icon=/usr/share/icons/Elive/scalable/apps/logo-elive.png"

    if ! el_dependencies_check "zenity,psort,sshd,gksu" ; then
        el_dependencies_install "zenity,elive-tools,ssh,gksu"

        # verify that ssh is running
        if ! ps aux | grep -v grep | grep -q "root.*bin.*sshd" ; then
            if ((is_mode_live)) ; then
                # enable ssh with plain passwords {{{
                # this is disabled by default in live mode, enable it:

                if ((is_mode_live)) ; then
                    sudo -H sed -i -e 's|#\(PasswordAuthentication\) no|\1 yes|' /etc/ssh/sshd_config
                fi
                # - enable ssh with plain passwords }}}
                sudo /etc/init.d/ssh restart
            else
                if [[ -n "$DISPLAY" ]] ; then
                    gksu /etc/init.d/ssh start
                else
                    el_error "$( eval_gettext "You need to install ssh and have it running first" )"
                fi
            fi
        fi
    fi


    if grep -q "boot=live" /proc/cmdline ; then
        is_mode_live=1
    fi


    # }}}
    port_local_min="2048"
    port_local_max="2068"

    if [[ -z "$port_local" ]] ; then
        port_local="${port_local_min}"
    fi

    # check if our ssh is set up {{{
    if [[ -n $DISPLAY ]] ; then
        $guitool --question --text="$( eval_gettext "This tool allows you to have remote assistance from an Elive developer in a secure way, giving him access to your computer. Continue?" )" || exit
    else
        echo -e "$( eval_gettext "This tool gives you remote assistance from an Elive developer in a secure way, giving him access to your computer." )"

        if ! el_confirm "Do you want to continue?" ; then
            echo -e "Ok, bye"
            exit
        fi
    fi


    # we are in live mode: reconfigure root pass
    if grep -q "boot=live" /proc/cmdline ; then
        #if sudo grep -q "^root::" /etc/shadow || sudo grep -q "^root:x:" /etc/shadow ; then
        # ^ always re-configure root password for live mode
        if [[ -n "$DISPLAY" ]] ; then
            #urxvt -e bash -c "echo ; echo 'Enter the new password for root (hidden):' ; echo ; echo ; sudo passwd ; sleep 3"
            if $guitool --question --text="$( eval_gettext "You are in livecd mode, do you want to change your default system password to a new one for increase the security of your computer?" )" ; then
                result="$( $guitool --entry --text="$( eval_gettext "Insert a new password for root" )" || echo cancel )"
                # verify
                if [[ "${result}" = "cancel" ]] ; then
                    exit
                fi
                pass_root="$result"

                # change root password
                echo "root:${pass_root}" | sudo chpasswd -m
            else
                pass_root="elive"
            fi

        else
            local message_type_root_pass
            message_type_root_pass="$( printf "$( eval_gettext "Enter the new password for root (admin), what you type is hidden:" )" "" )"
            local message_type_root_pass_details

            sudo passwd
        fi

        # no ssh running
        if ! ps aux | grep -v grep | grep -q "root.*bin.*sshd" ; then
            sudo /etc/init.d/ssh start
        fi

    else

        if [[ -n "$DISPLAY" ]] ; then

            result="$( $guitool --entry --text="$( eval_gettext "Insert your root (admin) password, we need to know it to be able to connect" )" || echo cancel )"
            # verify
            if [[ "${result}" = "cancel" ]] || [[ -z "$result" ]] ; then
                $guitool --error --text="$( eval_gettext "We cannot connect to your computer if we don't know the password to use" )"
                exit
            fi
            pass_root="$result"

        fi

        # no ssh running
        if ! ps aux | grep -v grep | grep -q "root.*bin.*sshd" ; then
            if [[ -n "$DISPLAY" ]] ; then
                for i in 1 2 3 4 5 6
                do
                    gksu /etc/init.d/ssh start && break
                done
            else
                el_sudo /etc/init.d/ssh restart
            fi
        fi
    fi




    # - check if ssh is set up }}}
    # ask for email too, just in case {{{
    if [[ -n "$DISPLAY" ]] ; then
        result="$( $guitool --entry --text="$( eval_gettext "It will be useful for us to have a way to contact you in case we would need it, please insert your email if you have any." )" )"
        if [[ "$result" = *@* ]] ; then
            user_email="$result"
        fi
    fi

    # }}}
    # internet connection {{{
    if ! el_verify_internet ; then
        if [[ -n "$DISPLAY" ]] ; then
            $guitool --info --text="$( eval_gettext "You need to be connected to internet, please connect first and then continue" )"
        else
            echo "$( eval_gettext "You need to be connected to internet, please connect first and then continue" )"
            read nada
        fi
    fi


    # - internet connection }}}
    # list surgeons {{{
    if [[ -n $DISPLAY ]] ; then
        if [[ "$( ls -1 /usr/share/eliveremote/surgeons/*/profile.sh | wc -l )" -gt 1 ]] ; then
            result="$( while read -ru 3 line
                            do
                                source "$line"
                                el_check_variables "SURGEON_NAME,SURGEON_NICK,SURGEON_POSITION"

                                echo "$line"
                                echo "$SURGEON_NICK"
                                echo "$SURGEON_NAME"
                                echo "$SURGEON_POSITION"
                            done 3<<< "$( ls -1 /usr/share/eliveremote/surgeons/*/profile.sh | psort -- -p "eliveadmin" -p "thanatermesis" )" | $guitool --list --width=620 --height=280 --text="$( eval_gettext "Select the person that you want to give access to your computer from the list" )" --hide-column=1 --column="" --column="$( eval_gettext "Nickname" )" --column="$( eval_gettext "Name" )" --column="$( eval_gettext "Ranked" )" || echo "cancel" )"
        else
            if [[ -s "/usr/share/eliveremote/surgeons/eliveadmin1/profile.sh" ]] ; then
                result="/usr/share/eliveremote/surgeons/eliveadmin1/profile.sh"
            else
                result="/usr/share/eliveremote/surgeons/thanatermesis/profile.sh"
            fi
        fi
else
    # graphical system not works, only thanatermesis for now, no time to code
    #result="/usr/share/eliveremote/surgeons/thanatermesis/profile.sh"
    result="/usr/share/eliveremote/surgeons/thanatermesis/profile.sh"
fi

if [[ "${result}" = "cancel" ]] ; then
    exit
fi
profile_d="${result%/profile.sh}"


source "${profile_d}/profile.sh"

el_check_variables "SURGEON_NAME,SURGEON_NICK,SURGEON_POSITION,SURGEON_ADDRESS,SURGEON_PORT"



# - list surgeons }}}

if [[ -n "$DISPLAY" ]] ; then
    { sleep 1 ; echo 10 ; sleep 1000 ; } \
        | $guitool --progress --auto-kill --text="$( eval_gettext "Connecting, please wait..." )" --pulsate &
    pid_progress=$!
fi


connection_check

connection_stablish

cleanups
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
