#!/bin/bash
source /usr/lib/elive-tools/functions
TEXTDOMAIN="eliveremote"
export TEXTDOMAIN

trap "cleanups 1 SIGHUP ; exit" SIGHUP
trap "cleanups 1 KILL ; exit" KILL
trap "cleanups 1 QUIT ; exit" QUIT
trap "cleanups 1 TERM ; exit" TERM
#trap "cleanups 1 EXIT" EXIT
trap "cleanups 1 INT ; exit" INT
trap "cleanups 1 ERR ; exit" ERR

logs="/tmp/.$(basename $0)-${USER}-logs.txt"
connection_attemps=0

#===  FUNCTION  ================================================================
#          NAME:  cleanups
#   DESCRIPTION:  function for exit / end processes / cleanups
#===============================================================================
cleanups(){
    # pre {{{
    el_debug "$@"

    # }}}
    # remove existing connection
    if [[ -n "$pid_connection" ]] ; then
        kill "$pid_connection" 2>/dev/null || kill -9 "${pid_connection}" 2>/dev/null
    fi

    # remove other possible connections
    if ps aux | grep -v grep | grep -q "ssh -o StrictHostKey" ; then
        killall ssh 2>/dev/null
        killall -9 ssh 2>/dev/null
    fi

    # close progress dialog
    if [[ -n "$pid_progress" ]] ; then
        kill "$pid_progress" 2>/dev/null || kill -9 "${pid_progress}" 2>/dev/null
    fi

}

#===  FUNCTION  ================================================================
#          NAME:  port_verify
#   DESCRIPTION:  verify if the port is busy or not
#    PARAMETERS:  file with logs
#       RETURNS:  false if we need to enter in a new loop (for use in parent)
#===============================================================================
port_verify(){
    # pre {{{
    local file
    el_debug
    el_security_function_loop 22 || return

    file="$1"
    el_check_variables "file"

    if ! [[ -e "$file" ]] ; then
        sleep 2
        if ! [[ -e "$file" ]] ; then
            el_explain 0 "file to verify not exist, ignoring verification of port, it should be ok"
            return
        fi
    fi


    # }}}

    # port busy ?
    if grep -q "remote port forwarding failed for listen port" "${file}"  ; then
        # report error to surgeon
        el_explain 0 "port ${port_local} busy, trying with the next one"

        # increase port
        port_local="$(( $port_local + 1 ))"
        if [[ "${port_local}" -gt "${port_local_max}" ]] ; then
            el_error "reached maximum port available, exiting..."
            exit 1
        fi

        # run again
        ${FUNCNAME[1]}
        return 1
    fi

    if grep -q "Connection timed out" "${file}"  ; then
        el_error "timeout trying to connect"
    fi

    is_port_accepted=1
}
#===  FUNCTION  ================================================================
#          NAME:  connection_check
#   DESCRIPTION:  check if the remote is reachable
#===============================================================================
connection_check(){
    # pre {{{
    el_debug

    el_security_function_loop 22 || return

    el_check_variables "port_local"

    # }}}
    # check connection with surgeon {{{

    timeout 25 ssh -q -o StrictHostKeyChecking=no -i "${profile_d}/id_rsa" -T -R ${port_local}:localhost:${SURGEON_PORT} eliveremote@${SURGEON_ADDRESS} 2>"${logs}" 1>/dev/null
    returned_status="$?"
    case $returned_status in

        1)
            if ! ((is_port_accepted)) ; then
                if ! port_verify "${logs}" ; then
                    # break because we already enter again
                    break
                fi
            fi

            # connection successful (logouted)
            true

            ;;
        255)
            # ssh is down, returns 255
            if [[ "$connection_attemps" -gt 3 ]] || grep -q "Connection timed out" "${logs}"  ; then
                if [[ -n $DISPLAY ]] ; then
                    $guitool --error --text=$"The selected administrator is not available, please select another one"
                else
                    echo -e $"The selected administrator is not available, please select another one"
                fi
                main "$@"
                exit

            else
                # increment attempt
                connection_attemps="$(( $connection_attemps + 1 ))"
                sleep 4

                # increment port, since can be due to a busy port too
                port_local="$(( $port_local + 1 ))"
                if [[ "${port_local}" -gt "${port_local_max}" ]] ; then
                    el_error "reached maximum port available, exiting..."
                    exit 1
                fi

                # try again
                ${FUNCNAME}
                break
            fi

            ;;
        124|123)
            if [[ -n $DISPLAY ]] ; then
                $guitool --error --text=$"Seems like we was unable to check the connectivity, is your connection to internet enough stable? Please try again"
            else
                echo -e $"Seems like we was unable to check the connectivity, is your connection to internet enough stable? Please try again"
            fi

            exit

            ;;
        *)
            el_warning "unknown return status for the remote check, please report it: $returned_status"
            cat "${logs}"
            ;;
    esac


    # - check connectivity }}}

}
#===  FUNCTION  ================================================================
#          NAME:  connection_stablish
#   DESCRIPTION:  open the connection and track it
#    PARAMETERS:  -
#       RETURNS:  -
#===============================================================================
connection_stablish(){
    # pre {{{
    el_debug

    el_security_function_loop 22 || return

    local loops is_connection_started
    loops=0

    # cleanups function for remove remaining process
    # remove existing connection
    if [[ -n "$pid_connection" ]] ; then
        kill "$pid_connection" 2>/dev/null || kill -9 "${pid_connection}" 2>/dev/null
    fi


    rm -f "${logs}"

    # }}}

    timeout 43200 ssh -o StrictHostKeyChecking=no -i ${profile_d}/id_rsa -T -N -R ${port_local}:localhost:${SURGEON_PORT} eliveremote@${SURGEON_ADDRESS} >"${logs}" 2>&1  &
    pid_connection="$!"

    while true
    do
        sleep 6

        # try with another port if this one not works
        if ! ((is_port_accepted)) ; then
            if ! port_verify "${logs}" ; then
                # break because we already enter again
                break
            fi
        fi

        if ! ((is_connection_started)) ; then
            if [[ "$loops" -gt 3 ]] ; then

                kill "$pid_progress" 2>/dev/null || kill -9 "${pid_progress}" 2>/dev/null

                el_explain 0 "using port __${port_local}__"
                is_connection_started=1

                # share your connection info {{{

                # now that we are connected, give the info
                if [[ -n $DISPLAY ]] ; then
                    # xchat available ?
                    if ! el_dependencies_check xchat ; then
                        el_dependencies_install xchat
                    fi

                    # automatic mode
                    if $guitool --question --text=$"Do you want to automatically inform the details of the connection to the administrator via private message in the chat room? (recommended)" ; then
                        xchat &
                        # wait an entire minute for a successful connection, just in case that less is not enough
                        sleep 60
                        xchat -e -c "msg ${SURGEON_NICK} root pass:  ${pass_root}" &
                        xchat -e -c "msg ${SURGEON_NICK} port:       ${port_local}" &
                        $guitool --info --text=$"Information sent in a private message to ${SURGEON_NICK} on the IRC chat, please make sure it is connected or he will not receive the info and cannot assist you, note that this message is sent successfully only if the chat was able to connect to the elive room, otherwise try to connect again or do it manually"
                    else
                        $guitool --info --text=$"Please open your chat application (second icon of your dock bar) and contact ${SURGEON_NICK}. Tell him your root password in a private chat (right click)"
                    fi
                else
                    echo -e $"Please contact ${SURGEON_NICK} for be able to connect, he needs to know only your root password, you can do it from another computer or you can run 'irssi' for open an IRC chat in console mode, you should enter in the channel #elive of the irc.freenode.net server"
                fi


                # please wait until it closes
                if [[ -n "$DISPLAY" ]] ; then
                    $guitool --info --text=$"The remote user should be now connected, please wait until a message appears about that the connection has finished"
                else
                    echo -e $"The remote user should be now connected, please wait until a message appears about that the connection has finished"
                fi



                # - share your connection info }}}
            fi
        fi

        # check if connection stills up
        if ! ps aux | grep -v grep | grep -q "ssh.*StrictHostKeyChecking.*${port_local}" ; then

            if [[ -n "$DISPLAY" ]] ; then
                $guitool --info --text=$"Connection finished"
            else
                echo -e $"Connection finished"
            fi

            cleanups
            exit
        fi

        loops="$(( $loops + 1 ))"
    done
}


main(){
    # pre {{{
    local guitool surgeon line result profile_d returned_status pass_root

    guitool="zenity --window-icon=/usr/share/icons/Elive/scalable/apps/logo-elive.png"
    if ! el_dependencies_check "zenity,psort,sshd" ; then
        el_dependencies_install "zenity,elive-tools,ssh"

        # verify that ssh is running
        if ! ps aux | grep -v grep | grep -q "root.*bin.*sshd" ; then
            if [[ -d /live ]] || grep -q "boot=live" /proc/cmdline ; then
                sudo /etc/init.d/ssh start
            else
                if [[ -n $DISPLAY ]] ; then
                    gksu /etc/init.d/ssh start
                else
                    el_error $"You need to install ssh and have it running first"
                fi
            fi
        fi
    fi



    # }}}
    port_local_min="2048"
    port_local_max="2068"
    port_local="${port_local_min}"

    # check if our ssh is set up {{{
    if [[ -n $DISPLAY ]] ; then
        $guitool --question --text=$"This tool gives you remote assistance from an Elive developer in a secure way, giving him access to your computer, continue only if this is what you want to do and the developer told you to run this tool now.""\n"$"Do you want to continue?" || exit
    else
        echo -e $"This tool gives you remote assistance from an Elive developer in a secure way, giving him access to your computer, continue only if this is what you want to do and the developer told you to run this tool now."
        echo -e "Press ^C if you want to exit now"
    fi


    # we are in live mode: reconfigure root pass
    if [[ -d /live ]] || grep -q "boot=live" /proc/cmdline ; then
        #if sudo grep -q "^root::" /etc/shadow || sudo grep -q "^root:x:" /etc/shadow ; then
        # ^ always re-configure root password for live mode
        if [[ -n "$DISPLAY" ]] ; then
            #urxvt -e bash -c "echo ; echo 'Enter the new password for root (hidden):' ; echo ; echo ; sudo passwd ; sleep 3"
            if $guitool --question --text=$"You are in livecd mode, do you want to change your default system password to a new one for increase the security of your computer?" ; then
                result="$( $guitool --entry --text=$"Insert a new password for root" || echo cancel )"
                # verify
                if [[ "${result}" = "cancel" ]] ; then
                    exit
                fi
                pass_root="$result"

                # change root password
                echo "root:${pass_root}" | sudo chpasswd -m
            else
                pass_root="elive"
            fi

        else
            echo ; echo 'Enter the new password for root (hidden)' ; echo 'You need to give this password to the admin in order to connect' ; echo ; echo ; sudo passwd
        fi

        # no ssh running
        if ! ps aux | grep -v grep | grep -q "root.*bin.*sshd" ; then
            sudo /etc/init.d/ssh start
        fi

    fi



    # - check if ssh is set up }}}
    # internet connection {{{
    if ! el_verify_internet ; then
        if [[ -n "$DISPLAY" ]] ; then
            $guitool --info --text=$"You need to be connected to internet, please connect first and then continue"
        else
            echo $"You need to be connected to internet, please connect first and then continue"
            read nada
        fi
    fi


    # - internet connection }}}
    # list surgeons {{{
    if [[ -n $DISPLAY ]] ; then
        result="$( while read -ru 3 line
        do
            source "$line"
            el_check_variables "SURGEON_NAME,SURGEON_NICK,SURGEON_POSITION"

            echo "$line"
            echo "$SURGEON_NICK"
            echo "$SURGEON_NAME"
            echo "$SURGEON_POSITION"
        done 3<<< "$( ls -1 /usr/share/eliveremote/surgeons/*/profile.sh | psort -- -p "thanatermesis" )" | $guitool --list --text=$"Select the person that you want to give access to your computer from the list" --hide-column=1 --column="" --column=$"Nickname" --column=$"Name" --column=$"Position" || echo "cancel" )"

    else
        # graphical system not works, only thanatermesis for now
        result="/usr/share/eliveremote/surgeons/thanatermesis/profile.sh"
    fi

    if [[ "${result}" = "cancel" ]] ; then
        exit
    fi
    profile_d="${result%/profile.sh}"


    source "${profile_d}/profile.sh"

    el_check_variables "SURGEON_NAME,SURGEON_NICK,SURGEON_POSITION,SURGEON_ADDRESS,SURGEON_PORT"



    # - list surgeons }}}

    if [[ -n "$DISPLAY" ]] ; then
        { sleep 1 ; echo 10 ; sleep 1000 ; } \
            | $guitool --progress --auto-kill --text=$"Connecting, please wait..." --pulsate &
        pid_progress=$!
    fi


    connection_check

    connection_stablish


    cleanups
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
