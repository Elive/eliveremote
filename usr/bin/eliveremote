#!/bin/bash
source /usr/lib/elive-tools/functions
TEXTDOMAIN="eliveremote"
export TEXTDOMAIN



main(){
    # pre {{{
    local guitool surgeon line result port profile_d returned_status pass_root pid_connection

    guitool="zenity --window-icon=/usr/share/icons/Elive/scalable/apps/logo-elive.png"
    if ! el_dependencies_check "zenity,psort,sshd" ; then
        el_dependencies_install "zenity,elive-tools,ssh"

        # verify that ssh is running
        if ! ps aux | grep -v grep | grep -q "root.*bin.*sshd" ; then
            if [[ -d /live ]] || grep -q "boot=live" /proc/cmdline ; then
                sudo /etc/init.d/ssh start
            else
                if [[ -n $DISPLAY ]] ; then
                    gksu /etc/init.d/ssh start
                else
                    el_error $"You need to install ssh and have it running first"
                fi
            fi
        fi
    fi



    # }}}
    port="2048"

    # check if our ssh is set up {{{
    if [[ -n $DISPLAY ]] ; then
        $guitool --question --text=$"This tool gives you remote assistance from an Elive developer in a secure way, giving him access to your computer, continue only if this is what you want to do and the developer told you to run this tool now.""\n"$"Do you want to continue?" || exit
    else
        echo -e $"This tool gives you remote assistance from an Elive developer in a secure way, giving him access to your computer, continue only if this is what you want to do and the developer told you to run this tool now."
        echo -e "Press ^C if you want to exit now"
    fi


    # we are in live mode: reconfigure root pass
    if [[ -d /live ]] || grep -q "boot=live" /proc/cmdline ; then
        #if sudo grep -q "^root::" /etc/shadow || sudo grep -q "^root:x:" /etc/shadow ; then
        # ^ always re-configure root password for live mode
        if [[ -n "$DISPLAY" ]] ; then
            #urxvt -e bash -c "echo ; echo 'Enter the new password for root (hidden):' ; echo ; echo ; sudo passwd ; sleep 3"
            if $guitool --question --text=$"You are in live mode, do you want to change your default 'elive' root password to a new one for increase the security of your computer?" ; then
                result="$( $guitool --entry --text=$"Insert a new password for root" || echo cancel )"
                # verify
                if [[ "${result}" = "cancel" ]] ; then
                    exit
                fi
                pass_root="$result"

                # change root password
                echo "root:${pass_root}" | sudo chpasswd -m
            else
                pass_root="elive"
            fi

        else
            echo ; echo 'Enter the new password for root (hidden)' ; echo 'You need to give this password to the admin in order to connect' ; echo ; echo ; sudo passwd
        fi

        # no ssh running
        if ! ps aux | grep -v grep | grep -q "root.*bin.*sshd" ; then
            sudo /etc/init.d/ssh start
        fi

    fi



    # - check if ssh is set up }}}
    # internet connection {{{
    if ! el_verify_internet ; then
        if [[ -n "$DISPLAY" ]] ; then
            $guitool --info --text=$"You need to be connected to internet, please connect first and then continue"
        else
            echo $"You need to be connected to internet, please connect first and then continue"
            read nada
        fi
    fi


    # - internet connection }}}
    # list surgeons {{{
    if [[ -n $DISPLAY ]] ; then
        result="$( while read -ru 3 line
        do
            source "$line"
            el_check_variables "SURGEON_NAME,SURGEON_NICK,SURGEON_POSITION"

            echo "$line"
            echo "$SURGEON_NICK"
            echo "$SURGEON_NAME"
            echo "$SURGEON_POSITION"
        done 3<<< "$( ls -1 /usr/share/eliveremote/surgeons/*/profile.sh | psort -- -p "thanatermesis" )" | $guitool --list --text=$"Select the person that you want to give access to your computer from the list" --hide-column=1 --column="" --column=$"Nickname" --column=$"Name" --column=$"Position" || echo "cancel" )"

    else
        # graphical system not works, only thanatermesis for now
        result="/usr/share/eliveremote/surgeons/thanatermesis/profile.sh"
    fi

    if [[ "${result}" = "cancel" ]] ; then
        exit
    fi
    profile_d="${result%/profile.sh}"


    source "${profile_d}/profile.sh"

    el_check_variables "SURGEON_NAME,SURGEON_NICK,SURGEON_POSITION,SURGEON_ADDRESS,SURGEON_PORT"



    # - list surgeons }}}

    # check connection with surgeon {{{
    echo -e "\ntesting availability of connection with the remote"
    timeout 25 ssh -q -o StrictHostKeyChecking=no -i "${profile_d}/id_rsa" -T -R ${port}:localhost:${SURGEON_PORT} eliveremote@${SURGEON_ADDRESS}
    returned_status="$?"
    case $returned_status in
        1)
            # connection successful (logouted)
            true
            ;;
        255)
            # ssh is down, returns 255
            if [[ -n $DISPLAY ]] ; then
                $guitool --error --text=$"The selected administrator is not available, please select another one"
            else
                echo -e $"The selected administrator is not available, please select another one"
            fi
            main "$@"
            exit
            ;;
        *)
            el_warning "unknown return status for the remote check, please report it: $returned_status"
            ;;
    esac


    # - check connectivity }}}
    # stablish connection {{{
    # ask root password
    # FIXME: can we get the password remotely with this kind of log ? (var/log/auth):
    #Jan 31 16:13:49 Zeus sshd[28305]: input_userauth_request: invalid user eliveremote2 [preauth]

    #result="$( $guitool --entry --text=$"Insert your administrator password, required for the remote assistance" || echo cancel )"
    ## verify
    #if [[ "${result}" = "cancel" ]] ; then
        #exit
    #fi


    if [[ -n $DISPLAY ]] ; then
        # xchat available ?
        if ! el_dependencies_check xchat ; then
            el_dependencies_install xchat
        fi

        # automatic mode
        if $guitool --question --text=$"Do you want to automatically inform the details of the connection to the administrator via private message in the chat room? (recommended)" ; then
            xchat &
            # wait an entire minute for a successful connection, just in case that less is not enough
            sleep 60
            xchat -e -c "msg ${SURGEON_NICK} root pass:  ${pass_root}"
            xchat -e -c "msg ${SURGEON_NICK} port:       ${port}"
            $guitool --info --text=$"Information sent in a private message to ${SURGEON_NICK} on the IRC chat, please make sure it is connected or he will not receive the info and cannot assist you, note that this message is sent successfully only if the chat was able to connect to the elive room, otherwise try to connect again or do it manually"
        else
            $guitool --info --text=$"Please open your chat application (second icon of your dock bar) and contact ${SURGEON_NICK}. Tell him your root password in a private chat (right click)"
        fi
    else
        echo -e $"Please contact ${SURGEON_NICK} for be able to connect, he needs to know only your root password, you can do it from another computer or you can run 'irssi' for open an IRC chat in console mode, you should enter in the channel #elive of the irc.freenode.net server"
    fi

    # stablish a connection
    # 43200 = 12 hours, an high limit of timeout connection
    if [[ -n $DISPLAY ]] ; then
        urxvt -hold -e bash -c "echo Opened remote access ; echo ; timeout 43200 ssh -o StrictHostKeyChecking=no -i ${profile_d}/id_rsa -T -N -R ${port}:localhost:${SURGEON_PORT} eliveremote@${SURGEON_ADDRESS} ; echo Please close the terminal" &
    else
        echo Opened remote access
        echo
        timeout 43200 ssh -o StrictHostKeyChecking=no -i ${profile_d}/id_rsa -T -N -R ${port}:localhost:${SURGEON_PORT} eliveremote@${SURGEON_ADDRESS} &
    fi

    pid="$!"
    #echo "$pid"
    #ps aux | grep $pid

    #sleep 4
    #if [[ -n $DISPLAY ]] ; then
        #$guitool --info --text= "The opened terminal allows to maintain the connection opened, you can close it when the remote person tell you that all has been finished or if you see a message of connection closed"
    #else
        #echo -e   "The connection is opened, press 'Control + C' for close it\nor reboot the computer when the remote person tell you that has finished"
    #fi


    # - stablish connection }}}
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
