#!/bin/bash
source /usr/lib/elive-tools/functions
#
# HOW to connect:
# the client is connected in reverse mode to us (or the elive server) but not with a login (like a paused connection), so first you need to be in the place where he is connected (your computer? the elive server?), and then connect from it to him, like:
#
#  $ ssh -Y elivewp@hostdo1.elivecd.org         # connect to a user in the server where he is connected (don't needs to be eliveremote)
#  $ ssh -Y -p 2048 -o StrictHostKeyChecking=no root@localhost               # connect to the client user
#
#  note: since 'eliveremote-connect' (guided tool for the admins) needs sudo, a good thing is to have automated sudo or to connect as root on the server
#
#  TIP combo:
#  $ ssh -Y ewp
#  $ su
#  $ eliveremote-connect -c
#
# XXX HOWTO: XXX
#
# To be a surgeon:
# - create an user in your system, make sure that his login is set to /bin/false in /etc/passwd, something like:  "eliveremote:x:1002:1002:Random,,,:/home/eliveremote:/bin/false", otherwise people could connect to your computer
# - "su eliveremote" and create a ssh key, add the PRIVATE (yes, private) key to this package so people can stablish a connection to you
# - thats all, this package should include that private key so you can connect to the users, the connection is stablished to you without login and that opens a reverse tunnel so you can connect to his computer, in fact is teh same as do a simple ssh but you avoid all the f*cking lose of time explaining to the users how to open a port


# Usage
usage(){
    echo -e "\n$(basename $0) [OPTIONS]"
    cat <<'EOF'

Options:
  -p, --port        set the port to use
  -c, --connect     connect to remote
  -d, --disconnect  disconnect the remote
  -l, --list        list waiting connections
  -Y                with X11 access to your computer

Note: if you are a surgeon in the server (useful for when you cannot open your own ports), do:
- ssh to the server (ewp?), then:
- ssh -p 2048 root@localhost
EOF
    exit
}

select_connection_waiting(){
    local list

    if [[ -n "$port" ]] ; then
        # not needed to list, we forced the use of a specific port
        return
    fi


    while true
    do
        list="$( sudo netstat -puta | grep -E "(localhost:204.|localhost:205.|localhost:206.).*LISTEN" | grep -v "^tcp6" | tr ' ' '\n' | grep "localhost:20" )"
        [[ -n "$list" ]] && break

        echo -ne "\rWaiting...   "
        sleep 2
    done
    # for tests purposes:
    #list="$( echo -e "localhost:2051\nlocalhost:2052" )"

    # pick one, multiple connections
    if [[ "$( echo "$list" | wc -l )" -gt 1 ]] ; then
        port="$( echo -e "${list}" | sed -e 's|localhost:||g' | zenity --list --text="Select one of the waiting ports" --column="Port" )"
    fi

    port="${list##*:}"

}


do_connect(){
    if ! el_check_variables "port" ; then
        exit 1
    fi

    el_explain 0 "note: 'Connection refused' can mean that the password is not set in the remote"
    el_explain 0 "to copy files use: __scp -P $port file.png ${remote_user}@localhost:/tmp__"

    rm -f "${HOME}/.ssh/known_hosts"
    el_speak_text "connection ready" 2>/dev/null

    el_explain 0 "ssh -p ${port} ${sshopts} ${remote_user}@localhost"
    ssh -p ${port} ${sshopts} ${remote_user}@localhost


    # if we can't directly connect, wait and connect
    #if ! ssh -p ${port} root@localhost ; then
        #while true
        #do
            #echo "waiting..."
            #if sudo tail -40 /var/log/auth.log | grep -q eliveremote ; then
                ## remote should be ready, connect now
                #ssh -p ${port} root@localhost

                #break
            #fi
            #sleep 2
        #done
    #fi

}

do_disconnect(){
    if ! el_check_variables "port" ; then
        exit 1
    fi

    # get the pid of the listening process and eject it
    pid_connection="$( sudo netstat -puta | grep "localhost:${port}" | grep -v "^tcp6" | tr ' ' '\n' | grep "/sshd:" | sed 's|/sshd:.*$||g' | sort -u | head -1  )"

    if [[ -n "$pid_connection" ]] ; then
        echo "killing connection with pid: $pid_connection"
        sudo kill "${pid_connection}"
    fi
}


main(){
    # pre {{{
    local var port arg do_connect do_disconnect

    # Usage
    if [[ -z "${1}" ]] ; then
        usage
    fi

    # copy the tool to the home of the user
    if [[ ! -x "${HOME}/bin/$(basename $0)" ]] ; then
        mkdir -p "${HOME}/bin"
        if [[ "${0}" != "/"* ]] && [[ "${0}" != ../* ]] ; then
            ln -s "$(pwd)/$(basename $0)" "${HOME}/bin/$(basename $0)"
        else
            ln -s "$0" "${HOME}/bin/$(basename $0)"
        fi
    fi


    # }}}
    # args {{{

    # option string, for short options.
    # very much like getopts, any option followed by a ':' takes a required arg
    optstring=p:u:hcdlY

    # iterate over options, breaking -ab into -a -b and --foo=bar into --foo bar
    # also turns -- into --endopts to avoid issues with things like '-o-', the '-'
    # should not indicate the end of options, but be an invalid option (or the
    # argument to the option, such as wget -qO-)
    unset options
    while (($#)); do
        case $1 in
            # if option is of type -ab
            -[!-]?*)
            # loop over each character starting with the second
            for ((i=1; i<${#1}; i++)); do
                c=${1:i:1}

                # add current char to options
                options+=("-$c")

                # if option takes a required argument, and it's not the last char
                # make the rest of the string its argument
                if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
                    options+=("${1:i+1}")
                    break
                fi
            done
            ;;
            # if option is of type --foo=bar, split on first '='
            --?*=*) options+=("${1%%=*}" "${1#*=}");;
            # add --endopts for --
            --) options+=(--endopts);;
            # otherwise, nothing special
            *) options+=("$1");;
        esac

        shift
    done
    # set new positional parameters to altered options
    set -- "${options[@]}"
    unset options

    # actually parse the options and do stuff
    while [[ $1 = -?* ]]; do
        case $1 in
            -h|--help)
                usage >&2; exit 0
                ;;
            -p|--port)
                port="$2"
                shift 1
                ;;
            -c|--connect)
                do_connect=1
                ;;
            -d|--disconnect)
                do_disconnect=1
                ;;
            -l|--list)
                do_list=1
		;;
	    -Y|--x11-access)
		sshopts="-Y $sshopts"
		# remove extra leading blank chars
		read -r sshopts <<< "$sshopts"
                ;;
	    -u|--user)
		remote_user="$2"
		shift 1
                ;;
            --endopts) shift; break
                ;;
            *) echo "invalid option: $1" 1>&2 ; exit
                ;;
        esac

        shift
    done



    # - args }}}

    #: ${port="2048"}
    : ${remote_user="root"}

    if ((do_list)) ; then
        select_connection_waiting

        if [[ -n "$port" ]] ; then
            el_explain 0 "available connection in port  XX${port}XX"
        else
            el_explain 0 "nobody found"
        fi

    fi

    if ((do_connect)) ; then
        select_connection_waiting
        do_connect

        if el_confirm "disconnect remote user?" ; then
            do_disconnect
        fi
    fi

    if ((do_disconnect)) ; then
        select_connection_waiting
        do_disconnect
    fi

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
